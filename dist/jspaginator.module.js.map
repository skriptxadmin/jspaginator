{"mappings":"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","sources":["<anon>","src/index.ts","src/jspaginator.ts","src/helpers/CreateElement.ts","src/helpers/CreateListElement.ts","src/helpers/CreateNavButton.ts","src/helpers/EnableBtn.ts","src/helpers/DisableBtn.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $65039edd0cd3bea1$exports = {};\n\n$parcel$export($65039edd0cd3bea1$exports, \"Paginator\", () => $65039edd0cd3bea1$export$98986e0ddad1af5a);\nfunction $b7f91d14cbaf989a$export$b11b83b4c0e60f43(ele, html = '', classNames = '', attributes = {}) {\n    const ele$ = document.createElement(ele);\n    for(let key in attributes)ele$.setAttribute(key, attributes[key]);\n    const classNamesTrimmed = classNames.trim();\n    if (classNamesTrimmed) {\n        const classNamesSplitted = classNamesTrimmed.split(' ');\n        const classNamesMapped = classNamesSplitted.map((v)=>v.trim()).filter((v)=>v);\n        classNamesMapped.forEach((className)=>{\n            ele$.classList.add(className);\n        });\n    }\n    ele$.innerHTML = html;\n    return ele$;\n}\n\n\n\nfunction $ba3d9b8a4af67538$export$8fa3b0623dc5004a(content, btnClassname, classNames = {}) {\n    let li, btn, span;\n    li = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('li', '', classNames?.li);\n    btn = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('button', '', `page ${btnClassname} ${classNames?.button ? classNames.button : ''}`);\n    span = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('span', content, classNames?.span);\n    btn.append(span);\n    li.append(btn);\n    return li;\n}\n\n\n\nfunction $1b3eaad5d4ca32ec$export$f01981a96f40f9c3(config, defaultContent, key) {\n    if (config?.html?.hasOwnProperty(key)) {\n        if (config.html[key]) {\n            const trimmed = config?.html[key]?.toString().trim();\n            if (!trimmed) return null;\n            return (0, $ba3d9b8a4af67538$export$8fa3b0623dc5004a)(trimmed, key, config.classNames);\n        }\n        return null;\n    }\n    return (0, $ba3d9b8a4af67538$export$8fa3b0623dc5004a)(defaultContent, key, config.classNames);\n}\n\n\nfunction $ce13bb4afdde2b21$export$6ae0c356a95a937b(btn, activeClass) {\n    if (!btn.classList.contains('number')) btn.closest('li').classList.remove('disabled');\n    btn.removeAttribute('disabled');\n    btn.classList.remove(activeClass);\n}\n\n\nfunction $28dbe287e2a11a7e$export$989e9142cd3eb435(btn, activeClass) {\n    if (!btn.classList.contains('number')) btn.closest('li').classList.add('disabled');\n    btn.setAttribute('disabled', true);\n    btn.classList.add(activeClass);\n}\n\n\nclass $65039edd0cd3bea1$export$98986e0ddad1af5a {\n    get filtered() {\n        return this.config.filtered || 0;\n    }\n    get total() {\n        return this.config.totalItems || this.items$?.length;\n    }\n    get itemsPerPage() {\n        return this.config?.itemsPerPage || 10;\n    }\n    get totalPages() {\n        return Math.ceil(this.total / this.itemsPerPage);\n    }\n    get start() {\n        return (this.currentPage - 1) * this.itemsPerPage;\n    }\n    get end() {\n        let end = this.start + this.itemsPerPage;\n        if (end > this.total) end = this.total;\n        return end;\n    }\n    get activeClass() {\n        return this.config?.classNames?.active || 'active';\n    }\n    get maxNumbers() {\n        if (this.config?.html?.maxNumbers) return parseInt(this.config?.html?.maxNumbers);\n        return 5;\n    }\n    constructor(items$, config){\n        this.currentPage = 1;\n        this.pageSelected = this.currentPage;\n        if (!items$?.length) {\n            console.error('The elements to be paginated is empty');\n            return;\n        }\n        if (!config.paginator$) {\n            console.error('The paginator wrapping element is empty');\n            return;\n        }\n        this.items$ = items$;\n        this.paginator$ = config.paginator$;\n        this.config = config;\n        if (this.config.currentPage) {\n            this.currentPage = this.config.currentPage;\n            this.pageSelected = this.currentPage;\n        }\n        this.paginator$.innerHTML = '';\n        this.hideItems();\n        this.renderInfoText();\n        this.renderNav();\n    }\n    renderInfoText() {\n        if (!this.config.infoText) return;\n        let infoText$ = this.paginator$.querySelector('.skriptx--paginator-info-text');\n        if (!infoText$) {\n            infoText$ = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('div', '', 'skriptx--paginator-info-text');\n            this.paginator$.append(infoText$);\n        }\n        const replaced = this.config.infoText.replace(':start', (this.start + 1).toString()).replace(':end', this.end.toString()).replace(':filtered', this.filtered.toString()).replace(':total', this.total.toString());\n        infoText$.innerHTML = replaced;\n    }\n    hideItems() {\n        if (this.config.server) return;\n        this.items$.forEach((item$, index)=>{\n            item$.style.display = '';\n            if (index < this.start || index >= this.end) item$.style.display = 'none';\n        });\n    }\n    renderNav() {\n        let li;\n        const ul = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('ul', '', this.config?.classNames?.ul);\n        li = (0, $1b3eaad5d4ca32ec$export$f01981a96f40f9c3)(this.config, '&laquo;', 'first');\n        if (li) ul.append(li);\n        li = (0, $1b3eaad5d4ca32ec$export$f01981a96f40f9c3)(this.config, '&lsaquo;', 'prev');\n        if (li) ul.append(li);\n        if (this.config.html?.hasOwnProperty('number')) {\n            if (this.config.html.number) this.renderNumber(ul);\n        } else this.renderNumber(ul);\n        li = (0, $1b3eaad5d4ca32ec$export$f01981a96f40f9c3)(this.config, '&rsaquo;', 'next');\n        if (li) ul.append(li);\n        li = (0, $1b3eaad5d4ca32ec$export$f01981a96f40f9c3)(this.config, '&raquo;', 'last');\n        if (li) ul.append(li);\n        const nav = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('nav', '', this.config?.classNames?.nav);\n        nav.append(ul);\n        this.paginator$.append(nav);\n        this.captureNavButtons();\n        this.captureSelect();\n        this.disableButtons();\n    }\n    captureSelect() {\n        const nav = this.paginator$.querySelector(\"nav\");\n        const select = nav?.querySelector('select');\n        if (!select) return;\n        this.updateSelect();\n        select.addEventListener('change', ()=>{\n            this.pageSelected = parseInt(select.value);\n            this.onPageChange();\n        });\n    }\n    captureNavButtons() {\n        const nav = this.paginator$.querySelector(\"nav\");\n        const buttons = nav?.querySelectorAll('button');\n        if (!buttons?.length) return;\n        buttons.forEach((btn)=>{\n            btn.addEventListener('click', ()=>{\n                if (btn.classList.contains('number')) this.pageSelected = parseInt(btn.innerText);\n                if (btn.classList.contains('first')) this.pageSelected = 1;\n                if (btn.classList.contains('last')) this.pageSelected = parseInt(this.totalPages);\n                if (btn.classList.contains('prev')) this.pageSelected = this.currentPage - 1;\n                if (btn.classList.contains('next')) this.pageSelected = this.currentPage + 1;\n                if (this.pageSelected < 1) this.pageSelected = 1;\n                if (this.pageSelected > this.totalPages) this.pageSelected = this.totalPages;\n                this.onPageChange();\n            });\n        });\n    }\n    onPageChange() {\n        this.emitOnPageChange();\n        if (this.config.server) {\n            this.paginator$.innerHTML = '';\n            return;\n        }\n        this.currentPage = this.pageSelected;\n        this.renderInfoText();\n        this.hideItems();\n        this.disableButtons();\n        this.updateSelect();\n    }\n    updateSelect() {\n        const nav = this.paginator$.querySelector(\"nav\");\n        const select = nav?.querySelector('select');\n        if (!select) return;\n        if (select.value != this.currentPage.toString()) select.value = this.currentPage;\n    }\n    emitOnPageChange() {\n        if (this.config.hasOwnProperty('onPageChange') && typeof this.config.onPageChange == 'function') this.config.onPageChange({\n            prev: this.currentPage,\n            now: this.pageSelected\n        });\n    }\n    renderNumber(ul) {\n        let li;\n        if (this.totalPages > this.maxNumbers) {\n            const select = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('select', '', this.config?.classNames?.select);\n            for(let i = 1; i <= this.totalPages; i++){\n                const option = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('option', i, '', {\n                    value: i\n                });\n                select.append(option);\n            }\n            const li = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('li');\n            const div = (0, $b7f91d14cbaf989a$export$b11b83b4c0e60f43)('div', '', this.config?.classNames?.selectDiv);\n            div.append(select);\n            li.append(div);\n            ul.append(li);\n        } else for(let i = 1; i <= this.totalPages; i++){\n            li = (0, $ba3d9b8a4af67538$export$8fa3b0623dc5004a)(i, 'number', this.config.classNames);\n            ul.append(li);\n        }\n    }\n    disableButtons() {\n        const nav = this.paginator$.querySelector(\"nav\");\n        const buttons = nav?.querySelectorAll('button');\n        buttons.forEach((btn)=>{\n            (0, $ce13bb4afdde2b21$export$6ae0c356a95a937b)(btn, this.activeClass);\n            if (btn.classList.contains('number')) {\n                if (parseInt(btn.innerText) == this.currentPage) (0, $28dbe287e2a11a7e$export$989e9142cd3eb435)(btn, this.activeClass);\n            }\n            if (btn.classList.contains('first') || btn.classList.contains('prev')) {\n                if (this.currentPage == 1) (0, $28dbe287e2a11a7e$export$989e9142cd3eb435)(btn, this.activeClass);\n            }\n            if (btn.classList.contains('last') || btn.classList.contains('next')) {\n                if (this.currentPage == this.totalPages) (0, $28dbe287e2a11a7e$export$989e9142cd3eb435)(btn, this.activeClass);\n            }\n        });\n    }\n}\n\n\n\n\nexport {$65039edd0cd3bea1$export$98986e0ddad1af5a as Paginator};\n//# sourceMappingURL=jspaginator.module.js.map\n","export * from './jspaginator';","import { CreateElement } from './helpers/CreateElement';\r\nimport { Config } from './interfaces/Config';\r\nimport { CreateListElement } from './helpers/CreateListElement';\r\nimport { CreateNavButton } from './helpers/CreateNavButton';\r\nimport { EnableBtn } from './helpers/EnableBtn';\r\nimport { DisableBtn } from './helpers/DisableBtn';\r\n\r\nexport class Paginator {\r\n\r\n    paginator$: HTMLElement;\r\n\r\n    items$: HTMLElement[];\r\n\r\n    config: Config;\r\n\r\n    currentPage: number = 1;\r\n\r\n    pageSelected: number = this.currentPage;\r\n\r\n    get filtered() {\r\n\r\n        return this.config.filtered || 0;\r\n    }\r\n\r\n    get total() {\r\n\r\n        return this.config.totalItems || this.items$?.length\r\n    }\r\n    get itemsPerPage(): any {\r\n\r\n        return this.config?.itemsPerPage || 10;\r\n    }\r\n\r\n    get totalPages(): any {\r\n\r\n        return Math.ceil(this.total / this.itemsPerPage)\r\n    }\r\n\r\n    get start(): any {\r\n\r\n        return ((this.currentPage - 1) * (this.itemsPerPage));\r\n    }\r\n\r\n    get end(): any {\r\n\r\n        let end = this.start + this.itemsPerPage;\r\n\r\n        if (end > this.total) {\r\n\r\n            end = this.total;\r\n        }\r\n        return end;\r\n    }\r\n\r\n    get activeClass() {\r\n\r\n        return this.config?.classNames?.active || 'active';\r\n    }\r\n\r\n    get maxNumbers() {\r\n\r\n        if (this.config?.html?.maxNumbers) {\r\n            return parseInt(this.config?.html?.maxNumbers);\r\n        }\r\n\r\n        return 5;\r\n    }\r\n    constructor(items$, config) {\r\n\r\n        if (!items$?.length) {\r\n\r\n            console.error('The elements to be paginated is empty');\r\n\r\n            return;\r\n        }\r\n\r\n        if (!config.paginator$) {\r\n\r\n            console.error('The paginator wrapping element is empty');\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        this.items$ = items$;\r\n\r\n        this.paginator$ = config.paginator$;\r\n\r\n        this.config = config;\r\n\r\n        if (this.config.currentPage) {\r\n            this.currentPage = this.config.currentPage;\r\n            this.pageSelected = this.currentPage;\r\n        }\r\n\r\n        this.paginator$.innerHTML = '';\r\n\r\n\r\n        this.hideItems();\r\n\r\n\r\n        this.renderInfoText();\r\n\r\n        this.renderNav();\r\n\r\n    }\r\n\r\n\r\n    renderInfoText() {\r\n\r\n        if (!this.config.infoText) {\r\n\r\n            return;\r\n        }\r\n\r\n        let infoText$: any = this.paginator$.querySelector('.skriptx--paginator-info-text');\r\n\r\n        if (!infoText$) {\r\n            infoText$ = CreateElement('div', '', 'skriptx--paginator-info-text');\r\n            this.paginator$.append(infoText$);\r\n        }\r\n\r\n        const replaced = this.config.infoText\r\n            .replace(':start', (this.start + 1).toString())\r\n            .replace(':end', this.end.toString())\r\n            .replace(':filtered', this.filtered.toString())\r\n            .replace(':total', this.total.toString());\r\n        infoText$.innerHTML = replaced;\r\n\r\n    }\r\n\r\n    hideItems() {\r\n        if (this.config.server) {\r\n            return;\r\n        }\r\n        this.items$.forEach((item$, index) => {\r\n            item$.style.display = '';\r\n            if (index < this.start || index >= this.end) {\r\n                item$.style.display = 'none';\r\n            }\r\n        })\r\n    }\r\n\r\n    renderNav() {\r\n\r\n        let li;\r\n\r\n        const ul = CreateElement('ul', '', this.config?.classNames?.ul);\r\n\r\n        li = CreateNavButton(this.config, '&laquo;', 'first');\r\n\r\n        if (li) {\r\n\r\n            ul.append(li);\r\n\r\n        }\r\n\r\n        li = CreateNavButton(this.config, '&lsaquo;', 'prev');\r\n\r\n        if (li) {\r\n\r\n            ul.append(li);\r\n\r\n        }\r\n\r\n        if (this.config.html?.hasOwnProperty('number')) {\r\n            if (this.config.html.number) {\r\n                this.renderNumber(ul);\r\n            }\r\n\r\n        } else {\r\n\r\n            this.renderNumber(ul);\r\n        }\r\n\r\n\r\n\r\n\r\n        li = CreateNavButton(this.config, '&rsaquo;', 'next');\r\n\r\n        if (li) {\r\n\r\n            ul.append(li);\r\n\r\n        }\r\n\r\n        li = CreateNavButton(this.config, '&raquo;', 'last');\r\n\r\n        if (li) {\r\n\r\n            ul.append(li);\r\n\r\n        }\r\n\r\n\r\n        const nav = CreateElement('nav', '', this.config?.classNames?.nav);\r\n\r\n        nav.append(ul);\r\n\r\n        this.paginator$.append(nav);\r\n\r\n        this.captureNavButtons();\r\n\r\n        this.captureSelect();\r\n\r\n        this.disableButtons();\r\n\r\n    }\r\n\r\n    captureSelect() {\r\n\r\n        const nav = this.paginator$.querySelector(\"nav\");\r\n\r\n        const select: any = nav?.querySelector('select');\r\n\r\n        if (!select) {\r\n\r\n            return;\r\n        }\r\n\r\n        this.updateSelect();\r\n\r\n        select.addEventListener('change', () => {\r\n\r\n            this.pageSelected = parseInt(select.value);\r\n\r\n            this.onPageChange();\r\n\r\n        })\r\n    }\r\n\r\n    captureNavButtons() {\r\n\r\n        const nav = this.paginator$.querySelector(\"nav\");\r\n\r\n        const buttons: any = nav?.querySelectorAll('button');\r\n\r\n        if (!buttons?.length) {\r\n\r\n            return;\r\n        }\r\n        buttons.forEach(btn => {\r\n\r\n            btn.addEventListener('click', () => {\r\n\r\n                if (btn.classList.contains('number')) {\r\n                    this.pageSelected = parseInt(btn.innerText);\r\n                }\r\n                if (btn.classList.contains('first')) {\r\n                    this.pageSelected = 1;\r\n                }\r\n                if (btn.classList.contains('last')) {\r\n                    this.pageSelected = parseInt(this.totalPages);\r\n                }\r\n                if (btn.classList.contains('prev')) {\r\n                    this.pageSelected = this.currentPage - 1;\r\n                }\r\n                if (btn.classList.contains('next')) {\r\n                    this.pageSelected = this.currentPage + 1;\r\n                }\r\n\r\n                if (this.pageSelected < 1) {\r\n                    this.pageSelected = 1;\r\n                }\r\n                if (this.pageSelected > this.totalPages) {\r\n                    this.pageSelected = this.totalPages;\r\n                }\r\n\r\n                this.onPageChange();\r\n            })\r\n        })\r\n    }\r\n\r\n    onPageChange() {\r\n        this.emitOnPageChange();\r\n        if (this.config.server) {\r\n            this.paginator$.innerHTML = '';\r\n            return;\r\n        }\r\n        this.currentPage = this.pageSelected;\r\n        this.renderInfoText();\r\n        this.hideItems();\r\n        this.disableButtons();\r\n        this.updateSelect();\r\n\r\n    }\r\n\r\n    updateSelect() {\r\n\r\n        const nav = this.paginator$.querySelector(\"nav\");\r\n\r\n        const select: any = nav?.querySelector('select');\r\n\r\n        if (!select) {\r\n\r\n            return;\r\n        }\r\n\r\n\r\n        if (select.value != this.currentPage.toString()) {\r\n            select.value = this.currentPage;\r\n        }\r\n    }\r\n\r\n    emitOnPageChange() {\r\n\r\n        if (this.config.hasOwnProperty('onPageChange') && typeof (this.config.onPageChange) == 'function') {\r\n\r\n            this.config.onPageChange({ prev: this.currentPage, now: this.pageSelected });\r\n        }\r\n    }\r\n\r\n    renderNumber(ul) {\r\n        let li;\r\n        if (this.totalPages > this.maxNumbers) {\r\n\r\n            const select = CreateElement('select', '', this.config?.classNames?.select);\r\n            for (let i = 1; i <= this.totalPages; i++) {\r\n                const option = CreateElement('option', i, '', { value: i })\r\n\r\n                select.append(option)\r\n\r\n            }\r\n            const li = CreateElement('li');\r\n            const div = CreateElement('div', '', this.config?.classNames?.selectDiv);\r\n            div.append(select);\r\n            li.append(div);\r\n            ul.append(li);\r\n\r\n        } else {\r\n\r\n            for (let i = 1; i <= this.totalPages; i++) {\r\n\r\n                li = CreateListElement(i, 'number', this.config.classNames);\r\n\r\n                ul.append(li);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    disableButtons() {\r\n        const nav = this.paginator$.querySelector(\"nav\");\r\n\r\n        const buttons: any = nav?.querySelectorAll('button');\r\n\r\n        buttons.forEach(btn => {\r\n\r\n            EnableBtn(btn, this.activeClass);\r\n\r\n            if (btn.classList.contains('number')) {\r\n\r\n                if (parseInt(btn.innerText) == this.currentPage) {\r\n\r\n                    DisableBtn(btn, this.activeClass);\r\n                }\r\n\r\n            }\r\n            if (btn.classList.contains('first') || btn.classList.contains('prev')) {\r\n\r\n                if (this.currentPage == 1) {\r\n\r\n                    DisableBtn(btn, this.activeClass);\r\n                }\r\n\r\n            }\r\n            if (btn.classList.contains('last') || btn.classList.contains('next')) {\r\n\r\n                if (this.currentPage == this.totalPages) {\r\n\r\n                    DisableBtn(btn, this.activeClass);\r\n                }\r\n\r\n            }\r\n\r\n\r\n        })\r\n    }\r\n\r\n}","export function  CreateElement(ele, html: any = '', classNames: string = '', attributes = {}) {\r\n    const ele$ = document.createElement(ele);\r\n    for (let key in attributes) {\r\n        ele$.setAttribute(key, attributes[key]);\r\n    }\r\n    const classNamesTrimmed = classNames.trim();\r\n    if (classNamesTrimmed) {\r\n        const classNamesSplitted = classNamesTrimmed.split(' ');\r\n        const classNamesMapped = classNamesSplitted.map(v => v.trim()).filter(v => v);\r\n        classNamesMapped.forEach(className => {\r\n            ele$.classList.add(className);\r\n        })\r\n    }\r\n\r\n    ele$.innerHTML = html;\r\n\r\n    return ele$;\r\n}\r\n","import { CreateElement } from \"./CreateElement\";\r\nimport { ClassNames } from \"../interfaces/Classnames\";\r\n\r\nexport function CreateListElement(content, btnClassname, classNames:ClassNames = {}) {\r\n    let li, btn, span;\r\n    li = CreateElement('li', '', classNames?.li);\r\n    btn = CreateElement('button', '', `page ${btnClassname} ${classNames?.button?classNames.button:''}`);\r\n    span = CreateElement('span', content, classNames?.span);\r\n    btn.append(span);\r\n    li.append(btn);\r\n    return li;\r\n}","import { CreateListElement } from \"./CreateListElement\";\r\nexport function CreateNavButton(config, defaultContent, key) {\r\n\r\n    if (config?.html?.hasOwnProperty(key)) {\r\n        if (config.html[key]) {\r\n            const trimmed = config?.html[key]?.toString().trim();\r\n            if(!trimmed){\r\n                return null;\r\n            }\r\n            return CreateListElement(trimmed, key, config.classNames);\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    return CreateListElement(defaultContent, key, config.classNames);\r\n\r\n}","export function EnableBtn(btn, activeClass) {\r\n    if (!btn.classList.contains('number')) {\r\n        btn.closest('li').classList.remove('disabled');\r\n    }\r\n    btn.removeAttribute('disabled');\r\n    btn.classList.remove(activeClass);\r\n}","export function   DisableBtn(btn, activeClass) {\r\n    if (!btn.classList.contains('number')) {\r\n        btn.closest('li').classList.add('disabled');\r\n    }\r\n    btn.setAttribute('disabled', true);\r\n    btn.classList.add(activeClass);\r\n}"],"names":["$b7f91d14cbaf989a$export$b11b83b4c0e60f43","ele","html","classNames","attributes","ele$","document","createElement","key","setAttribute","classNamesTrimmed","trim","classNamesMapped","classNamesSplitted","split","map","v","filter","forEach","className","classList","add","innerHTML","$ba3d9b8a4af67538$export$8fa3b0623dc5004a","content","btnClassname","li","btn","span","button","append","$1b3eaad5d4ca32ec$export$f01981a96f40f9c3","config","defaultContent","hasOwnProperty","trimmed","toString","$28dbe287e2a11a7e$export$989e9142cd3eb435","activeClass","contains","closest","Object","defineProperty","get","$65039edd0cd3bea1$export$98986e0ddad1af5a","set","s","enumerable","configurable","filtered","total","totalItems","items$","length","itemsPerPage","totalPages","Math","ceil","start","currentPage","end","active","maxNumbers","parseInt","constructor","pageSelected","console","error","paginator$","hideItems","renderInfoText","renderNav","infoText","infoText$","querySelector","replaced","replace","server","item$","index","style","display","ul","number","renderNumber","nav","captureNavButtons","captureSelect","disableButtons","select","updateSelect","addEventListener","value","onPageChange","buttons","querySelectorAll","innerText","emitOnPageChange","prev","now","i","option","div","selectDiv","remove","removeAttribute","Paginator"],"version":3,"file":"jspaginator.module.js.map"}